"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
Autogenerated input type of CreateInstrument
"""
input CreateInstrumentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated input type of CreateProfile
"""
input CreateProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  instrument: FindInstrumentInput!
  user: FindUserInput!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input FindInstrumentInput @oneOf {
  """
  Find instrument by Id
  """
  id: ID

  """
  Find instrument by name
  """
  name: String
}

input FindUserInput @oneOf {
  """
  Find user by email
  """
  email: String

  """
  Find user by Id
  """
  id: ID
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Instrument {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  profileCount: Int
  profiles: [Profile!]
  updatedAt: ISO8601DateTime!
}

type Mutation {
  createInstrument(
    """
    Parameters for CreateInstrument
    """
    input: CreateInstrumentInput!
  ): Instrument
  createProfile(
    """
    Parameters for CreateProfile
    """
    input: CreateProfileInput!
  ): Profile
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): User
}

type Profile {
  createdAt: ISO8601DateTime!
  id: ID!
  instrument: Instrument!
  instrumentId: Int
  updatedAt: ISO8601DateTime!
  user: User!
  userId: Int
}

type Query {
  """
  find Instrument by id
  """
  instrument(id: ID!): [Instrument!]

  """
  find all Instruments
  """
  instruments: [Instrument!]

  """
  find Profile by id
  """
  profile(id: ID!): [Profile!]

  """
  find all Profiles
  """
  profiles: [Profile!]

  """
  find User by id
  """
  user(id: ID!): [User!]

  """
  find all Users
  """
  users: [User!]
}

type User {
  admin: Boolean
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String
  firstName: String
  id: ID!
  lastName: String
  latitude: Float
  longitude: Float
  name: String
  profiles: [Profile!]
  updatedAt: ISO8601DateTime!
}
